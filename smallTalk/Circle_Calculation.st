Object subclass: #Circle	instanceVariableNames: 'radius diameter circumference area'	classVariableNames: ''	poolDictionaries: ''	category: 'Circle_Calculation'!!Circle commentStamp: '<historical>' prior: 0!I represent a full circle. I am made from four Arcs.!!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!area	^ area! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!area: anObject	area := anObject.! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!circumference	^ circumference! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!circumference: anObject	circumference := anObject.! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!diameter	^ diameter! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!diameter: anObject	diameter := anObject.! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 14:55'!radius	^ radius! !!Circle methodsFor: 'accessing' stamp: 'JL 10/9/2019 15:12'!radius: anObject	radius := anObject.! !!Circle methodsFor: 'initializeRadius' stamp: 'JL 10/9/2019 16:09'!initialize: number"create a new circle and give it a radius(number) parameter.it will return the diameter, circumference and area on the transcript.eg. circle1:= Circle new.circle1 initialize:3."| numStr |self radius:number.self diameter:2.000 *number.self circumference: Float pi * self diameter.self area: Float pi * (self radius * self radius).numStr:= String streamContents: [	:strm | self radius printOn: strm showingDecimalPlaces:3].Transcript show:'radius:  ', numStr; cr.numStr:= String streamContents: [	:strm | self diameter printOn: strm showingDecimalPlaces:3].Transcript show:'diameter: ', numStr; cr.numStr:= String streamContents: [	:strm | self circumference printOn: strm showingDecimalPlaces:3].Transcript show: 'circumference: ', numStr; cr.numStr:= String streamContents: [	:strm | self area printOn: strm showingDecimalPlaces:3].Transcript show: 'area:  ', numStr; cr.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Circle class	instanceVariableNames: ''!!Circle class methodsFor: 'examples'!exampleOne 	"Click any button somewhere on the screen. The point will be the center	of the circcle of radius 150."	| aCircle aForm |	aForm := Form extent: 1@30.	aForm fillBlack.	aCircle := Circle new.	aCircle form: aForm.	aCircle radius: 150.	aCircle center: Sensor waitButton.	aCircle displayOn: Display		"Circle exampleOne"! !!Circle class methodsFor: 'examples'!exampleTwo	"Designate a rectangular area that should be used as the brush for	displaying the circle. Click any button at a point on the screen which	will be the center location for the circle. The curve will be displayed	with a long black form."	| aCircle aForm |	aForm := Form fromUser.	aCircle := Circle new.	aCircle form: aForm.	aCircle radius: 150.	aCircle center: Sensor waitButton.	aCircle displayOn: Display at: 0 @ 0 rule: Form reverse 	 "Circle exampleTwo"! !