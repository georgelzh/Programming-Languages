Object subclass: #Dog	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ProgrammingLanguageDemo'!!Dog methodsFor: 'as yet unclassified' stamp: 'JRV 10/7/2019 10:33'!greet	^'Woof'.! !!Dog methodsFor: 'as yet unclassified' stamp: 'JRV 10/7/2019 10:05'!greet: someone	^'Woof'.! !Object subclass: #Person	instanceVariableNames: 'fullName age'	classVariableNames: ''	poolDictionaries: ''	category: 'ProgrammingLanguageDemo'!!Person methodsFor: 'initialize-release' stamp: 'JRV 10/7/2019 10:43'!initialize	super initialize.	self age: 5.! !!Person methodsFor: 'functions' stamp: 'JRV 10/7/2019 11:04'!customGreet: otherPerson withMessage: message	"Let's greet our friend"	| greeting |	greeting := message, ', ', (otherPerson fullName).	^greeting.! !!Person methodsFor: 'functions' stamp: 'JRV 10/7/2019 11:09'!greet: otherPerson	"Let's greet our friend"	| greeting |	greeting := 'Hello, ', (otherPerson fullName), '. My name is ', (self fullName).	^greeting.! !!Person methodsFor: 'accessing' stamp: 'JRV 10/7/2019 10:42'!age	^ age! !!Person methodsFor: 'accessing' stamp: 'JRV 10/7/2019 10:42'!age: anObject	age := anObject.! !!Person methodsFor: 'accessing' stamp: 'JRV 10/7/2019 09:34'!fullName	^ fullName! !!Person methodsFor: 'accessing' stamp: 'JRV 10/7/2019 09:34'!fullName: anObject	fullName := anObject.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Person class	instanceVariableNames: ''!!Person class methodsFor: 'class initialization' stamp: 'JRV 10/7/2019 10:50'!newWithName: name	| newPerson |	newPerson := self new.	newPerson fullName: name.	^newPerson.	"^self new fullName: name; yourself."! !TestCase subclass: #PersonTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'ProgrammingLanguageDemo'!!PersonTests methodsFor: 'tests' stamp: 'JRV 10/7/2019 11:10'!testPersonGreeting	"This is a test of the generic person greet message"	| person otherPerson greeting expectedGreeting |	person := Person newWithName: 'Fizz'.	otherPerson := Person newWithName: 'Buzz'.		greeting := person greet: otherPerson.	expectedGreeting := 'Hello, Buzz. My name is Fizz'.	self should: [greeting = expectedGreeting].! !Person subclass: #Student	instanceVariableNames: 'classes major'	classVariableNames: ''	poolDictionaries: ''	category: 'ProgrammingLanguageDemo'!!Student methodsFor: 'as yet unclassified' stamp: 'JRV 10/7/2019 10:54'!greet: otherPerson	(otherPerson age < 30) ifTrue: [^'Hi'] ifFalse: [^super greet: otherPerson].! !